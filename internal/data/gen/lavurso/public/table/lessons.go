//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Lessons = newLessonsTable("public", "lessons", "")

type lessonsTable struct {
	postgres.Table

	//Columns
	ID          postgres.ColumnInteger
	JournalID   postgres.ColumnInteger
	Description postgres.ColumnString
	Date        postgres.ColumnDate
	Course      postgres.ColumnInteger
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LessonsTable struct {
	lessonsTable

	EXCLUDED lessonsTable
}

// AS creates new LessonsTable with assigned alias
func (a LessonsTable) AS(alias string) *LessonsTable {
	return newLessonsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LessonsTable with assigned schema name
func (a LessonsTable) FromSchema(schemaName string) *LessonsTable {
	return newLessonsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LessonsTable with assigned table prefix
func (a LessonsTable) WithPrefix(prefix string) *LessonsTable {
	return newLessonsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LessonsTable with assigned table suffix
func (a LessonsTable) WithSuffix(suffix string) *LessonsTable {
	return newLessonsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLessonsTable(schemaName, tableName, alias string) *LessonsTable {
	return &LessonsTable{
		lessonsTable: newLessonsTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newLessonsTableImpl("", "excluded", ""),
	}
}

func newLessonsTableImpl(schemaName, tableName, alias string) lessonsTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		JournalIDColumn   = postgres.IntegerColumn("journal_id")
		DescriptionColumn = postgres.StringColumn("description")
		DateColumn        = postgres.DateColumn("date")
		CourseColumn      = postgres.IntegerColumn("course")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		allColumns        = postgres.ColumnList{IDColumn, JournalIDColumn, DescriptionColumn, DateColumn, CourseColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{JournalIDColumn, DescriptionColumn, DateColumn, CourseColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return lessonsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		JournalID:   JournalIDColumn,
		Description: DescriptionColumn,
		Date:        DateColumn,
		Course:      CourseColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
