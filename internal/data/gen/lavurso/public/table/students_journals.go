//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var StudentsJournals = newStudentsJournalsTable("public", "students_journals", "")

type studentsJournalsTable struct {
	postgres.Table

	//Columns
	StudentID postgres.ColumnInteger
	JournalID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StudentsJournalsTable struct {
	studentsJournalsTable

	EXCLUDED studentsJournalsTable
}

// AS creates new StudentsJournalsTable with assigned alias
func (a StudentsJournalsTable) AS(alias string) *StudentsJournalsTable {
	return newStudentsJournalsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StudentsJournalsTable with assigned schema name
func (a StudentsJournalsTable) FromSchema(schemaName string) *StudentsJournalsTable {
	return newStudentsJournalsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StudentsJournalsTable with assigned table prefix
func (a StudentsJournalsTable) WithPrefix(prefix string) *StudentsJournalsTable {
	return newStudentsJournalsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StudentsJournalsTable with assigned table suffix
func (a StudentsJournalsTable) WithSuffix(suffix string) *StudentsJournalsTable {
	return newStudentsJournalsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStudentsJournalsTable(schemaName, tableName, alias string) *StudentsJournalsTable {
	return &StudentsJournalsTable{
		studentsJournalsTable: newStudentsJournalsTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newStudentsJournalsTableImpl("", "excluded", ""),
	}
}

func newStudentsJournalsTableImpl(schemaName, tableName, alias string) studentsJournalsTable {
	var (
		StudentIDColumn = postgres.IntegerColumn("student_id")
		JournalIDColumn = postgres.IntegerColumn("journal_id")
		allColumns      = postgres.ColumnList{StudentIDColumn, JournalIDColumn}
		mutableColumns  = postgres.ColumnList{}
	)

	return studentsJournalsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		StudentID: StudentIDColumn,
		JournalID: JournalIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
