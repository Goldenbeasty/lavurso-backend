//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ClassesYears = newClassesYearsTable("public", "classes_years", "")

type classesYearsTable struct {
	postgres.Table

	//Columns
	ClassID     postgres.ColumnInteger
	YearID      postgres.ColumnInteger
	DisplayName postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ClassesYearsTable struct {
	classesYearsTable

	EXCLUDED classesYearsTable
}

// AS creates new ClassesYearsTable with assigned alias
func (a ClassesYearsTable) AS(alias string) *ClassesYearsTable {
	return newClassesYearsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ClassesYearsTable with assigned schema name
func (a ClassesYearsTable) FromSchema(schemaName string) *ClassesYearsTable {
	return newClassesYearsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ClassesYearsTable with assigned table prefix
func (a ClassesYearsTable) WithPrefix(prefix string) *ClassesYearsTable {
	return newClassesYearsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ClassesYearsTable with assigned table suffix
func (a ClassesYearsTable) WithSuffix(suffix string) *ClassesYearsTable {
	return newClassesYearsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newClassesYearsTable(schemaName, tableName, alias string) *ClassesYearsTable {
	return &ClassesYearsTable{
		classesYearsTable: newClassesYearsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newClassesYearsTableImpl("", "excluded", ""),
	}
}

func newClassesYearsTableImpl(schemaName, tableName, alias string) classesYearsTable {
	var (
		ClassIDColumn     = postgres.IntegerColumn("class_id")
		YearIDColumn      = postgres.IntegerColumn("year_id")
		DisplayNameColumn = postgres.StringColumn("display_name")
		allColumns        = postgres.ColumnList{ClassIDColumn, YearIDColumn, DisplayNameColumn}
		mutableColumns    = postgres.ColumnList{DisplayNameColumn}
	)

	return classesYearsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ClassID:     ClassIDColumn,
		YearID:      YearIDColumn,
		DisplayName: DisplayNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
