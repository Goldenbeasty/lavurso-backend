//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Journals = newJournalsTable("public", "journals", "")

type journalsTable struct {
	postgres.Table

	//Columns
	ID          postgres.ColumnInteger
	Name        postgres.ColumnString
	SubjectID   postgres.ColumnInteger
	YearID      postgres.ColumnInteger
	LastUpdated postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type JournalsTable struct {
	journalsTable

	EXCLUDED journalsTable
}

// AS creates new JournalsTable with assigned alias
func (a JournalsTable) AS(alias string) *JournalsTable {
	return newJournalsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new JournalsTable with assigned schema name
func (a JournalsTable) FromSchema(schemaName string) *JournalsTable {
	return newJournalsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new JournalsTable with assigned table prefix
func (a JournalsTable) WithPrefix(prefix string) *JournalsTable {
	return newJournalsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new JournalsTable with assigned table suffix
func (a JournalsTable) WithSuffix(suffix string) *JournalsTable {
	return newJournalsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newJournalsTable(schemaName, tableName, alias string) *JournalsTable {
	return &JournalsTable{
		journalsTable: newJournalsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newJournalsTableImpl("", "excluded", ""),
	}
}

func newJournalsTableImpl(schemaName, tableName, alias string) journalsTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		NameColumn        = postgres.StringColumn("name")
		SubjectIDColumn   = postgres.IntegerColumn("subject_id")
		YearIDColumn      = postgres.IntegerColumn("year_id")
		LastUpdatedColumn = postgres.TimestampzColumn("last_updated")
		allColumns        = postgres.ColumnList{IDColumn, NameColumn, SubjectIDColumn, YearIDColumn, LastUpdatedColumn}
		mutableColumns    = postgres.ColumnList{NameColumn, SubjectIDColumn, YearIDColumn, LastUpdatedColumn}
	)

	return journalsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Name:        NameColumn,
		SubjectID:   SubjectIDColumn,
		YearID:      YearIDColumn,
		LastUpdated: LastUpdatedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
