//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Marks = newMarksTable("public", "marks", "")

type marksTable struct {
	postgres.Table

	//Columns
	ID        postgres.ColumnInteger
	UserID    postgres.ColumnInteger
	LessonID  postgres.ColumnInteger
	Course    postgres.ColumnInteger
	JournalID postgres.ColumnInteger
	GradeID   postgres.ColumnInteger
	Comment   postgres.ColumnString
	Type      postgres.ColumnString
	TeacherID postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MarksTable struct {
	marksTable

	EXCLUDED marksTable
}

// AS creates new MarksTable with assigned alias
func (a MarksTable) AS(alias string) *MarksTable {
	return newMarksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MarksTable with assigned schema name
func (a MarksTable) FromSchema(schemaName string) *MarksTable {
	return newMarksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MarksTable with assigned table prefix
func (a MarksTable) WithPrefix(prefix string) *MarksTable {
	return newMarksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MarksTable with assigned table suffix
func (a MarksTable) WithSuffix(suffix string) *MarksTable {
	return newMarksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMarksTable(schemaName, tableName, alias string) *MarksTable {
	return &MarksTable{
		marksTable: newMarksTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newMarksTableImpl("", "excluded", ""),
	}
}

func newMarksTableImpl(schemaName, tableName, alias string) marksTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		UserIDColumn    = postgres.IntegerColumn("user_id")
		LessonIDColumn  = postgres.IntegerColumn("lesson_id")
		CourseColumn    = postgres.IntegerColumn("course")
		JournalIDColumn = postgres.IntegerColumn("journal_id")
		GradeIDColumn   = postgres.IntegerColumn("grade_id")
		CommentColumn   = postgres.StringColumn("comment")
		TypeColumn      = postgres.StringColumn("type")
		TeacherIDColumn = postgres.IntegerColumn("teacher_id")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, UserIDColumn, LessonIDColumn, CourseColumn, JournalIDColumn, GradeIDColumn, CommentColumn, TypeColumn, TeacherIDColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{UserIDColumn, LessonIDColumn, CourseColumn, JournalIDColumn, GradeIDColumn, CommentColumn, TypeColumn, TeacherIDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return marksTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		UserID:    UserIDColumn,
		LessonID:  LessonIDColumn,
		Course:    CourseColumn,
		JournalID: JournalIDColumn,
		GradeID:   GradeIDColumn,
		Comment:   CommentColumn,
		Type:      TypeColumn,
		TeacherID: TeacherIDColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
