//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Threads = newThreadsTable("public", "threads", "")

type threadsTable struct {
	postgres.Table

	//Columns
	ID        postgres.ColumnInteger
	UserID    postgres.ColumnInteger
	Title     postgres.ColumnString
	Locked    postgres.ColumnBool
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ThreadsTable struct {
	threadsTable

	EXCLUDED threadsTable
}

// AS creates new ThreadsTable with assigned alias
func (a ThreadsTable) AS(alias string) *ThreadsTable {
	return newThreadsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ThreadsTable with assigned schema name
func (a ThreadsTable) FromSchema(schemaName string) *ThreadsTable {
	return newThreadsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ThreadsTable with assigned table prefix
func (a ThreadsTable) WithPrefix(prefix string) *ThreadsTable {
	return newThreadsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ThreadsTable with assigned table suffix
func (a ThreadsTable) WithSuffix(suffix string) *ThreadsTable {
	return newThreadsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newThreadsTable(schemaName, tableName, alias string) *ThreadsTable {
	return &ThreadsTable{
		threadsTable: newThreadsTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newThreadsTableImpl("", "excluded", ""),
	}
}

func newThreadsTableImpl(schemaName, tableName, alias string) threadsTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		UserIDColumn    = postgres.IntegerColumn("user_id")
		TitleColumn     = postgres.StringColumn("title")
		LockedColumn    = postgres.BoolColumn("locked")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, UserIDColumn, TitleColumn, LockedColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{UserIDColumn, TitleColumn, LockedColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return threadsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		UserID:    UserIDColumn,
		Title:     TitleColumn,
		Locked:    LockedColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
