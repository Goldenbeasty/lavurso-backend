//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Sessions = newSessionsTable("public", "sessions", "")

type sessionsTable struct {
	postgres.Table

	//Columns
	ID           postgres.ColumnInteger
	TokenHash    postgres.ColumnString
	UserID       postgres.ColumnInteger
	Expires      postgres.ColumnTimestampz
	LoginIP      postgres.ColumnString
	LoginBrowser postgres.ColumnString
	LoggedIn     postgres.ColumnTimestampz
	LastSeen     postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SessionsTable struct {
	sessionsTable

	EXCLUDED sessionsTable
}

// AS creates new SessionsTable with assigned alias
func (a SessionsTable) AS(alias string) *SessionsTable {
	return newSessionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SessionsTable with assigned schema name
func (a SessionsTable) FromSchema(schemaName string) *SessionsTable {
	return newSessionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SessionsTable with assigned table prefix
func (a SessionsTable) WithPrefix(prefix string) *SessionsTable {
	return newSessionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SessionsTable with assigned table suffix
func (a SessionsTable) WithSuffix(suffix string) *SessionsTable {
	return newSessionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSessionsTable(schemaName, tableName, alias string) *SessionsTable {
	return &SessionsTable{
		sessionsTable: newSessionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newSessionsTableImpl("", "excluded", ""),
	}
}

func newSessionsTableImpl(schemaName, tableName, alias string) sessionsTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		TokenHashColumn    = postgres.StringColumn("token_hash")
		UserIDColumn       = postgres.IntegerColumn("user_id")
		ExpiresColumn      = postgres.TimestampzColumn("expires")
		LoginIPColumn      = postgres.StringColumn("login_ip")
		LoginBrowserColumn = postgres.StringColumn("login_browser")
		LoggedInColumn     = postgres.TimestampzColumn("logged_in")
		LastSeenColumn     = postgres.TimestampzColumn("last_seen")
		allColumns         = postgres.ColumnList{IDColumn, TokenHashColumn, UserIDColumn, ExpiresColumn, LoginIPColumn, LoginBrowserColumn, LoggedInColumn, LastSeenColumn}
		mutableColumns     = postgres.ColumnList{TokenHashColumn, UserIDColumn, ExpiresColumn, LoginIPColumn, LoginBrowserColumn, LoggedInColumn, LastSeenColumn}
	)

	return sessionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		TokenHash:    TokenHashColumn,
		UserID:       UserIDColumn,
		Expires:      ExpiresColumn,
		LoginIP:      LoginIPColumn,
		LoginBrowser: LoginBrowserColumn,
		LoggedIn:     LoggedInColumn,
		LastSeen:     LastSeenColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
