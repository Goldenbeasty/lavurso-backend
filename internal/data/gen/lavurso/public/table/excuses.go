//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Excuses = newExcusesTable("public", "excuses", "")

type excusesTable struct {
	postgres.Table

	//Columns
	MarkID postgres.ColumnInteger
	Excuse postgres.ColumnString
	By     postgres.ColumnInteger
	At     postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ExcusesTable struct {
	excusesTable

	EXCLUDED excusesTable
}

// AS creates new ExcusesTable with assigned alias
func (a ExcusesTable) AS(alias string) *ExcusesTable {
	return newExcusesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ExcusesTable with assigned schema name
func (a ExcusesTable) FromSchema(schemaName string) *ExcusesTable {
	return newExcusesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ExcusesTable with assigned table prefix
func (a ExcusesTable) WithPrefix(prefix string) *ExcusesTable {
	return newExcusesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ExcusesTable with assigned table suffix
func (a ExcusesTable) WithSuffix(suffix string) *ExcusesTable {
	return newExcusesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newExcusesTable(schemaName, tableName, alias string) *ExcusesTable {
	return &ExcusesTable{
		excusesTable: newExcusesTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newExcusesTableImpl("", "excluded", ""),
	}
}

func newExcusesTableImpl(schemaName, tableName, alias string) excusesTable {
	var (
		MarkIDColumn   = postgres.IntegerColumn("mark_id")
		ExcuseColumn   = postgres.StringColumn("excuse")
		ByColumn       = postgres.IntegerColumn("by")
		AtColumn       = postgres.TimestampzColumn("at")
		allColumns     = postgres.ColumnList{MarkIDColumn, ExcuseColumn, ByColumn, AtColumn}
		mutableColumns = postgres.ColumnList{ExcuseColumn, ByColumn, AtColumn}
	)

	return excusesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		MarkID: MarkIDColumn,
		Excuse: ExcuseColumn,
		By:     ByColumn,
		At:     AtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
