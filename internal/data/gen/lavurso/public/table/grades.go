//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Grades = newGradesTable("public", "grades", "")

type gradesTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnInteger
	Identifier postgres.ColumnString
	Value      postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type GradesTable struct {
	gradesTable

	EXCLUDED gradesTable
}

// AS creates new GradesTable with assigned alias
func (a GradesTable) AS(alias string) *GradesTable {
	return newGradesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GradesTable with assigned schema name
func (a GradesTable) FromSchema(schemaName string) *GradesTable {
	return newGradesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GradesTable with assigned table prefix
func (a GradesTable) WithPrefix(prefix string) *GradesTable {
	return newGradesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GradesTable with assigned table suffix
func (a GradesTable) WithSuffix(suffix string) *GradesTable {
	return newGradesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGradesTable(schemaName, tableName, alias string) *GradesTable {
	return &GradesTable{
		gradesTable: newGradesTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newGradesTableImpl("", "excluded", ""),
	}
}

func newGradesTableImpl(schemaName, tableName, alias string) gradesTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		IdentifierColumn = postgres.StringColumn("identifier")
		ValueColumn      = postgres.IntegerColumn("value")
		allColumns       = postgres.ColumnList{IDColumn, IdentifierColumn, ValueColumn}
		mutableColumns   = postgres.ColumnList{IdentifierColumn, ValueColumn}
	)

	return gradesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Identifier: IdentifierColumn,
		Value:      ValueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
