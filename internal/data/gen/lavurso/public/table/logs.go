//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Logs = newLogsTable("public", "logs", "")

type logsTable struct {
	postgres.Table

	//Columns
	UserID       postgres.ColumnInteger
	SessionID    postgres.ColumnInteger
	Method       postgres.ColumnString
	Target       postgres.ColumnString
	IP           postgres.ColumnString
	ResponseCode postgres.ColumnInteger
	Duration     postgres.ColumnInteger
	At           postgres.ColumnTimestampz
	ID           postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LogsTable struct {
	logsTable

	EXCLUDED logsTable
}

// AS creates new LogsTable with assigned alias
func (a LogsTable) AS(alias string) *LogsTable {
	return newLogsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LogsTable with assigned schema name
func (a LogsTable) FromSchema(schemaName string) *LogsTable {
	return newLogsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LogsTable with assigned table prefix
func (a LogsTable) WithPrefix(prefix string) *LogsTable {
	return newLogsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LogsTable with assigned table suffix
func (a LogsTable) WithSuffix(suffix string) *LogsTable {
	return newLogsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLogsTable(schemaName, tableName, alias string) *LogsTable {
	return &LogsTable{
		logsTable: newLogsTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newLogsTableImpl("", "excluded", ""),
	}
}

func newLogsTableImpl(schemaName, tableName, alias string) logsTable {
	var (
		UserIDColumn       = postgres.IntegerColumn("user_id")
		SessionIDColumn    = postgres.IntegerColumn("session_id")
		MethodColumn       = postgres.StringColumn("method")
		TargetColumn       = postgres.StringColumn("target")
		IPColumn           = postgres.StringColumn("ip")
		ResponseCodeColumn = postgres.IntegerColumn("response_code")
		DurationColumn     = postgres.IntegerColumn("duration")
		AtColumn           = postgres.TimestampzColumn("at")
		IDColumn           = postgres.IntegerColumn("id")
		allColumns         = postgres.ColumnList{UserIDColumn, SessionIDColumn, MethodColumn, TargetColumn, IPColumn, ResponseCodeColumn, DurationColumn, AtColumn, IDColumn}
		mutableColumns     = postgres.ColumnList{UserIDColumn, SessionIDColumn, MethodColumn, TargetColumn, IPColumn, ResponseCodeColumn, DurationColumn, AtColumn}
	)

	return logsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:       UserIDColumn,
		SessionID:    SessionIDColumn,
		Method:       MethodColumn,
		Target:       TargetColumn,
		IP:           IPColumn,
		ResponseCode: ResponseCodeColumn,
		Duration:     DurationColumn,
		At:           AtColumn,
		ID:           IDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
