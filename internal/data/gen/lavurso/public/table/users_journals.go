//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UsersJournals = newUsersJournalsTable("public", "users_journals", "")

type usersJournalsTable struct {
	postgres.Table

	//Columns
	UserID    postgres.ColumnInteger
	JournalID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UsersJournalsTable struct {
	usersJournalsTable

	EXCLUDED usersJournalsTable
}

// AS creates new UsersJournalsTable with assigned alias
func (a UsersJournalsTable) AS(alias string) *UsersJournalsTable {
	return newUsersJournalsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersJournalsTable with assigned schema name
func (a UsersJournalsTable) FromSchema(schemaName string) *UsersJournalsTable {
	return newUsersJournalsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersJournalsTable with assigned table prefix
func (a UsersJournalsTable) WithPrefix(prefix string) *UsersJournalsTable {
	return newUsersJournalsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersJournalsTable with assigned table suffix
func (a UsersJournalsTable) WithSuffix(suffix string) *UsersJournalsTable {
	return newUsersJournalsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersJournalsTable(schemaName, tableName, alias string) *UsersJournalsTable {
	return &UsersJournalsTable{
		usersJournalsTable: newUsersJournalsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newUsersJournalsTableImpl("", "excluded", ""),
	}
}

func newUsersJournalsTableImpl(schemaName, tableName, alias string) usersJournalsTable {
	var (
		UserIDColumn    = postgres.IntegerColumn("user_id")
		JournalIDColumn = postgres.IntegerColumn("journal_id")
		allColumns      = postgres.ColumnList{UserIDColumn, JournalIDColumn}
		mutableColumns  = postgres.ColumnList{}
	)

	return usersJournalsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:    UserIDColumn,
		JournalID: JournalIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
