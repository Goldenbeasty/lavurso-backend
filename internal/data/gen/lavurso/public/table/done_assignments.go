//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var DoneAssignments = newDoneAssignmentsTable("public", "done_assignments", "")

type doneAssignmentsTable struct {
	postgres.Table

	//Columns
	UserID       postgres.ColumnInteger
	AssignmentID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DoneAssignmentsTable struct {
	doneAssignmentsTable

	EXCLUDED doneAssignmentsTable
}

// AS creates new DoneAssignmentsTable with assigned alias
func (a DoneAssignmentsTable) AS(alias string) *DoneAssignmentsTable {
	return newDoneAssignmentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DoneAssignmentsTable with assigned schema name
func (a DoneAssignmentsTable) FromSchema(schemaName string) *DoneAssignmentsTable {
	return newDoneAssignmentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DoneAssignmentsTable with assigned table prefix
func (a DoneAssignmentsTable) WithPrefix(prefix string) *DoneAssignmentsTable {
	return newDoneAssignmentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DoneAssignmentsTable with assigned table suffix
func (a DoneAssignmentsTable) WithSuffix(suffix string) *DoneAssignmentsTable {
	return newDoneAssignmentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDoneAssignmentsTable(schemaName, tableName, alias string) *DoneAssignmentsTable {
	return &DoneAssignmentsTable{
		doneAssignmentsTable: newDoneAssignmentsTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newDoneAssignmentsTableImpl("", "excluded", ""),
	}
}

func newDoneAssignmentsTableImpl(schemaName, tableName, alias string) doneAssignmentsTable {
	var (
		UserIDColumn       = postgres.IntegerColumn("user_id")
		AssignmentIDColumn = postgres.IntegerColumn("assignment_id")
		allColumns         = postgres.ColumnList{UserIDColumn, AssignmentIDColumn}
		mutableColumns     = postgres.ColumnList{}
	)

	return doneAssignmentsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:       UserIDColumn,
		AssignmentID: AssignmentIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
