//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ThreadsRead = newThreadsReadTable("public", "threads_read", "")

type threadsReadTable struct {
	postgres.Table

	//Columns
	ThreadID postgres.ColumnInteger
	UserID   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ThreadsReadTable struct {
	threadsReadTable

	EXCLUDED threadsReadTable
}

// AS creates new ThreadsReadTable with assigned alias
func (a ThreadsReadTable) AS(alias string) *ThreadsReadTable {
	return newThreadsReadTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ThreadsReadTable with assigned schema name
func (a ThreadsReadTable) FromSchema(schemaName string) *ThreadsReadTable {
	return newThreadsReadTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ThreadsReadTable with assigned table prefix
func (a ThreadsReadTable) WithPrefix(prefix string) *ThreadsReadTable {
	return newThreadsReadTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ThreadsReadTable with assigned table suffix
func (a ThreadsReadTable) WithSuffix(suffix string) *ThreadsReadTable {
	return newThreadsReadTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newThreadsReadTable(schemaName, tableName, alias string) *ThreadsReadTable {
	return &ThreadsReadTable{
		threadsReadTable: newThreadsReadTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newThreadsReadTableImpl("", "excluded", ""),
	}
}

func newThreadsReadTableImpl(schemaName, tableName, alias string) threadsReadTable {
	var (
		ThreadIDColumn = postgres.IntegerColumn("thread_id")
		UserIDColumn   = postgres.IntegerColumn("user_id")
		allColumns     = postgres.ColumnList{ThreadIDColumn, UserIDColumn}
		mutableColumns = postgres.ColumnList{}
	)

	return threadsReadTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ThreadID: ThreadIDColumn,
		UserID:   UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
