//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TeachersJournals = newTeachersJournalsTable("public", "teachers_journals", "")

type teachersJournalsTable struct {
	postgres.Table

	//Columns
	TeacherID postgres.ColumnInteger
	JournalID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TeachersJournalsTable struct {
	teachersJournalsTable

	EXCLUDED teachersJournalsTable
}

// AS creates new TeachersJournalsTable with assigned alias
func (a TeachersJournalsTable) AS(alias string) *TeachersJournalsTable {
	return newTeachersJournalsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TeachersJournalsTable with assigned schema name
func (a TeachersJournalsTable) FromSchema(schemaName string) *TeachersJournalsTable {
	return newTeachersJournalsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TeachersJournalsTable with assigned table prefix
func (a TeachersJournalsTable) WithPrefix(prefix string) *TeachersJournalsTable {
	return newTeachersJournalsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TeachersJournalsTable with assigned table suffix
func (a TeachersJournalsTable) WithSuffix(suffix string) *TeachersJournalsTable {
	return newTeachersJournalsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTeachersJournalsTable(schemaName, tableName, alias string) *TeachersJournalsTable {
	return &TeachersJournalsTable{
		teachersJournalsTable: newTeachersJournalsTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newTeachersJournalsTableImpl("", "excluded", ""),
	}
}

func newTeachersJournalsTableImpl(schemaName, tableName, alias string) teachersJournalsTable {
	var (
		TeacherIDColumn = postgres.IntegerColumn("teacher_id")
		JournalIDColumn = postgres.IntegerColumn("journal_id")
		allColumns      = postgres.ColumnList{TeacherIDColumn, JournalIDColumn}
		mutableColumns  = postgres.ColumnList{}
	)

	return teachersJournalsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		TeacherID: TeacherIDColumn,
		JournalID: JournalIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
