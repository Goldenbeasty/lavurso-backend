//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Messages = newMessagesTable("public", "messages", "")

type messagesTable struct {
	postgres.Table

	//Columns
	ID        postgres.ColumnInteger
	ThreadID  postgres.ColumnInteger
	UserID    postgres.ColumnInteger
	Body      postgres.ColumnString
	Type      postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MessagesTable struct {
	messagesTable

	EXCLUDED messagesTable
}

// AS creates new MessagesTable with assigned alias
func (a MessagesTable) AS(alias string) *MessagesTable {
	return newMessagesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MessagesTable with assigned schema name
func (a MessagesTable) FromSchema(schemaName string) *MessagesTable {
	return newMessagesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MessagesTable with assigned table prefix
func (a MessagesTable) WithPrefix(prefix string) *MessagesTable {
	return newMessagesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MessagesTable with assigned table suffix
func (a MessagesTable) WithSuffix(suffix string) *MessagesTable {
	return newMessagesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMessagesTable(schemaName, tableName, alias string) *MessagesTable {
	return &MessagesTable{
		messagesTable: newMessagesTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newMessagesTableImpl("", "excluded", ""),
	}
}

func newMessagesTableImpl(schemaName, tableName, alias string) messagesTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		ThreadIDColumn  = postgres.IntegerColumn("thread_id")
		UserIDColumn    = postgres.IntegerColumn("user_id")
		BodyColumn      = postgres.StringColumn("body")
		TypeColumn      = postgres.StringColumn("type")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, ThreadIDColumn, UserIDColumn, BodyColumn, TypeColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{ThreadIDColumn, UserIDColumn, BodyColumn, TypeColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return messagesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		ThreadID:  ThreadIDColumn,
		UserID:    UserIDColumn,
		Body:      BodyColumn,
		Type:      TypeColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
